Now I will discuss scripting blender scenes, which is essentially programming in python, but with the bpy import, which probably stands for "blender python."

As with the manual scene creation, I will focus less on teaching how to do it, since there are tutorials online, and focus more on important things I picked up while doing it.

An interesting note is that blender scripting is seemingly far less popular than manual blender scene creation, as there is a bit less about it on the internet. This makes sense since you can not make very detailed changes easily with blender scripting, and some graphic designers may not know how to code. In addition, the documentation for bpy is pretty bad, so it may be a bit more difficult to navigate blender scripting than manual creation.

The first and most important point: hovering over any action will give you the equivalent python code. What I mean by this is: if you hover over add, then cube, before you click it, code will appear to the right showing the python code for adding a cube the same way. Then, if you right click, you will get the option to copy the python code so you can paste it later. This is the best way to learn, since you can see the code for any manual action you can do and copy it.

In addition to this, I have provided two examples of scripting. One is for scene creation, and one is for creating an animation

Scene Creation:
I personally did not focus much on scripting for scene creation. This is because I already had scenes that I only had to make minor modifications to. The simple code I wrote for the scripting scene just creates a plane and five random cylinders within te plane. If you want to explore scripting, you can start with this baseline code and create your own scenes with scripting.

One weird thing about the scripting is that you have to delete every object in the scene before running it again, otherwise it will create the same objects on top of the previous ones. For my code, I just scripted it to highlight every single object in the scene and delete it before the rest of the script runs. The only problem with this is that it would also delete any cameras you have in the scene, so you would have to comment those deleting lines out, delete everything in the scene except for the cameras, and then  run the script. Then, if you want to modify the script, you will have to change the script, manually delete everything in the scene but the cameras again, and then run it again.

One other thing you'll note is that the scripted scene does not create any materials or bake anything. Although it is definetly possible to create materials for objects with scripting, join objects together, and even possible to bake in blender scripting, it is so niche and undocumented that it would be almost impossible to figure it out, especially the baking step. When I searched up scripting baking in blender, I found one post on blender stack exchange, and one post on reddit, and neither were complete. If I were to use a scripted scene for CompoundRay, I would just do the material creation and baking manually after the script creates the scene.

Animation:
The other thing I used scripting for is creating animations, and I believe you can find more use in this second reason for scripting. You can create animations in blender, and the main purpose I made some was to create a top-down view where the a model of the fly is moving throughout the scene, which could accompany a video of the fly's perspective created in CompoundRay so that viewers could understand what they are seeing better (see my example animation video). This would be especially useful if you are giving a presentation and you have a complicated scene your fly is traversing through, but you want the audience to understand the scene and the fly's motion. You can animate manually, but the scripting allows for you to easily code precise movements of the fly.

Like scene creation, I also have a very basic animation written for a created scene that has the top-down view and the fly moving through the environment. I also provide the fly model as an obj file which you can import into any blender scene. This blender fly model was provided to me by Igor Siwanowicz during my internship at Janelia. The good thing is, unless you also want this fly model in your CompoundRay scene, you don't need to bake anything for the animation to work. I provide the original model, as well as a version that has all the meshes joined together, since it is easier to select the object for animation when it is all joined together.

I actually reccomend watching videos of basic animations in blender created manually before learning it with scripting, just so you understand the concept of keyframes and the timeline. In addition, it might be easier to create animations in scenes with just one camera, since you can position that one camera and you know it will record the animation through that camera, so you could make a copy of a CompoundRay scene for animation only, delete the unecessary cameras, and then import the drosophila model. It may be possible that only the panoramic camera will work for the animation, so I would test around with that or add your own camera.

In addition, if you want your animation to exactly match what is happening in CompoundRay, you want to use the same number of frames for the same movements, move the same amount, and rotate the same amount. This is also where my previous point becomes important: you want to know if the units of movement in CompoundRay are the same as in blender. This is easy to see with for rotation, but translation may have different units or a conversion between the number to move forward in blender and in CompoundRay. Finally, you will notice that the animation script gives a first and last position for each key frame rather than a movement per frame. I don't know if there is a way to do a movement per frame rather than getting very granular, but as long as your movement is not too complicated, you can just do some math to see how far it is translating in how ever many frames and then get the starting and ending position to use in blender.

One final note: if you want the animation and CompoundRay video to be the same, you want to make sure you use the same number of frames, and then have the frames per second for each to be the same. You can change this in blender under output on the bottom right properties tab, and you can change this in CompoundRay by changing the fps value in the cv2.VideoWriter line (the fps is the number in that line, for takashiTest it should be 20, meaning 20 fps.)

Now, you should be able to use scripting to create scenes and create any animation you may need in blender.

