Next I will go over how to modify CompoundRay itself, while also explaining some of the modifications I made myself. I recieved a lot of assistance for the steps from txt files 6-8 by my internship mentor Arthur Zhao.

You may notice that the videos for different tests seem a little strange. If you don't understand what I am saying, you can see the differences under the projections folder under guide-supplemental. 

I altered CompoundRay itself to make its projection more accurate to the vision of Drosohphila. I made two significant changes to the "shaders.cu" file under libEyeRenderer3:

1. I incorporated a blind spot to make the model more accurate to drosophila vision. This is represented by the greyed out area in the updated projection. I incorporated this step for every single camera, and it only took a few lines of code. For example, in lines 453-461 in the updated shader file, you can see an if/else statement that I added, and I added it to each function so it would apply to every compound-eye camera.

The code itself is simple: if the angle between the closest ommatidia to a pixel and the position of that pixel is greater than 0.174533 radian (10 degrees), assign the color to the function "make_color2()" rather than using the original "make_color()" to assign the color of the pixel to the color of the ommatidia it is closest to. I created the "make_color2()" function, which essentially just returns the color grey. The 10 degrees number is a bit arbitrary, and you may want to change that number depending on how you want the model to output the vision. Also, the 10 degree number is an angle between two points on the surface of a sphere, since it temporarily wraps the 2D image around a sphere to calculate which ommatidia is closest to which pixels.

2. I also changed the projection from Mercator to Mollweide. This is shown by the square projection becoming an elliptical projection. For this, I had to use some math to change the coordinate system of the model, black out everything outside of the ellipse, and then fit all of the ommatidia within the ellipse. In addition, the wrapping around a sphere step was different, since it is now an ellipse rather than a square/rectangle. I only applied this change to the function "__raygen__compound_projection_spherical_orientationwise()", since it was the only compound eye camera I was using to generate the videos of the drosophila vision.

This function is found on line 467, and you can compare it to the other functions to see the difference, and the math that I did to wrap the ellipse around the sphere.

Also, the ellipse has an aspect ratio of 2:1 (twice as long as it is tall), and also is as large as possible while fitting within the display.

You can see which videos in the GitHub were made by which shader file version with the "shader_timeline.txt" file.

You can now edit the shader file yourself and make your own changes to the projection of CompoundRay. Just remember that you need to rebuild the library every time you update the shader file with the cmake and make -j lines in the setup procedures in order to see the change.

